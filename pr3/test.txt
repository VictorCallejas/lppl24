  1.- // Ejemplo de uso de operadores aritmeticos.
// Debe devolver el mismo numero elevado al cuadrado
//--------------------------------------------------
int main ()
{ int a;

  read(a);
  a = (((((2 * a) - a) + a) / 2) * a);
  print(a);

  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  main           FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  1:  a              VAR     T_ENTERO  1      0

  1.- // Ejemplo (rebuscado) del uso de operadores logicos y relacionales.
// Lee un par de numeros "x" e "y", si (x != y) y (x, y >= 0)
// entonces devuelve el valor absoluto de (x-y), si no, repite
// la lectura hasta que se cumplan las restricciones.
//------------------------------------------------------------------
int main ()
{ int x; int y; bool z = true;

  for (; z ;) {
    read(x); read(y);
    if ((x != y) || false)          
      if (!(x == 0) && true)                      
        if ((y > 0) && (x >= 0))
          if (y-x < 0) { print(x-y); z = false; }
          else { print(y-x); z = false; }
        else {}
      else {}
    else {}
  }

  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  main           FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  1:  x              VAR     T_ENTERO  1      0
  2:  y              VAR     T_ENTERO  1      1
  3:  z              VAR     T_LOGICO  1      2
 
  1.- // Ejemplo de uso de asignaciones como expresiones.
// Debe devolver: 28, 28, 14, 14, 14
//----------------------------------------------------------
int main ()
{ int A[3]; int a; int b = 7; int c;

  A[a=2]=28;  print(c=A[2]); print (c);
  print(a=b=a*b); print(a); print(b);

  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  main           FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  1:  A              VAR     T_ARRAY   1      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 3 
               ------------------------------------
  2:  a              VAR     T_ENTERO  1      3
  3:  b              VAR     T_ENTERO  1      4
  4:  c              VAR     T_ENTERO  1      5
 




  1.- // Ejemplo de manipulacion de vectores
// Devuelve la cuenta inversa de 9 a 0 (inclusive)
//------------------------------------------------
int a[10];

int main()
{ int i;

  for (i = 0; i < 10; i=i+1) a[i] = i;
  for (i = 9; i >= 0; i=i-1) print(a[i]);
  
  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 10 
               ------------------------------------
  1:  main           FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  2:  i              VAR     T_ENTERO  1      0

  1.- // Ejemplo de funciones y variables globales y locales
// Lee dos numeros (0 <= (x, y) < 10) y obtiene (x+y/2)
//-----------------------------------------------------
int a[10];

bool inicializa (int x)
{ int i;
  for (i=0; i < x; i=i+1)  a[i] = i;

  return true;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 10 
               ------------------------------------
  1:  inicializa     FUNC    T_LOGICO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  2:  x              PARAM   T_ENTERO  1     -3
  3:  i              VAR     T_ENTERO  1      0


int suma(int x, int y)
{ int a;
  a = x+y;
  
  return a;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 10 
               ------------------------------------
  1:  inicializa     FUNC    T_LOGICO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  2:  suma           FUNC    T_ENTERO  0     28
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  3:  y              PARAM   T_ENTERO  1     -3
  4:  x              PARAM   T_ENTERO  1     -4
  5:  a              VAR     T_ENTERO  1      0


int division(int x, int y)
{
  return x/y;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 10 
               ------------------------------------
  1:  inicializa     FUNC    T_LOGICO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  2:  suma           FUNC    T_ENTERO  0     28
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  3:  division       FUNC    T_ENTERO  0     40
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  4:  y              PARAM   T_ENTERO  1     -3
  5:  x              PARAM   T_ENTERO  1     -4


int x; int y;

int main()
{ bool ok; 
  
  ok = ! inicializa(10);

  for (ok = !inicializa(10); ! ok ; ) {
    read(x); read(y);
    if (((x>=0) && (x<10)) && ((y>=0) && (y<10))) ok = true;
    else {}
  }
  
  print(division(suma(a[x], y), 2));
  
  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_ENTERO   NumElem = 10 
               ------------------------------------
  1:  inicializa     FUNC    T_LOGICO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  2:  suma           FUNC    T_ENTERO  0     28
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  3:  division       FUNC    T_ENTERO  0     40
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  4:  x              VAR     T_ENTERO  0     10
  5:  y              VAR     T_ENTERO  0     11
  6:  main           FUNC    T_ENTERO  0     50
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  7:  ok             VAR     T_LOGICO  1      0

  1.- // Calcula el factorial de un numero > 0 y < 13
//---------------------------------------------
int factorial(int n)
{ int f;

  if (n <= 1) f=1;
  else f= n * factorial(n-1);
  
  return f;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  factorial      FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  1:  n              PARAM   T_ENTERO  1     -3
  2:  f              VAR     T_ENTERO  1      0


int main()
{ int x; bool ok=true;

  for ( ; ok ; ) {
   read(x);
   if (x > 0) 
     if (x < 13) {
        print(factorial(x));
	ok=false;
     }
     else {}
   else {}
  }
  
  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  factorial      FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  1
               ------------------------------------
  1:  main           FUNC    T_ENTERO  0     30
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  2:  x              VAR     T_ENTERO  1      0
  3:  ok             VAR     T_LOGICO  1      1

  1.- // Calcula el maximo comun divisor de dos numeros > 0.
// Por ejemplo, la salida esperada para 42 y 56 es 14.
// 450,360->90; 150,180->30; 
//----------------------------------------------------
int max(int x, int y)
{ int z;
  if (x < y) z = y;
  else       z = x;
  return z;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  max            FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  1:  y              PARAM   T_ENTERO  1     -3
  2:  x              PARAM   T_ENTERO  1     -4
  3:  z              VAR     T_ENTERO  1      0


int min(int x, int y)
{ int z;
  if (x < y) z = x;
  else       z = y;
  return z;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  max            FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  1:  min            FUNC    T_ENTERO  0     21
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  2:  y              PARAM   T_ENTERO  1     -3
  3:  x              PARAM   T_ENTERO  1     -4
  4:  z              VAR     T_ENTERO  1      0


int mcd(int x, int y)
{ int z;
  if (x == y) z = x;
  else        z = mcd(min(x,y-x),max(x,y-x));
  return z;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  max            FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  1:  min            FUNC    T_ENTERO  0     21
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  2:  mcd            FUNC    T_ENTERO  0     40
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  3:  y              PARAM   T_ENTERO  1     -3
  4:  x              PARAM   T_ENTERO  1     -4
  5:  z              VAR     T_ENTERO  1      0


int main()
{ int x; int y; bool z=true;

  for (; z ;) {
    read(x);  read(y);
    if ((x>0)&&(y>0)) {
      if (x < y) print(mcd(x, y));
      else       print(mcd(y, x));
      z=false;
    }
    else {}
  }
  
  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  max            FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  1:  min            FUNC    T_ENTERO  0     21
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  2:  mcd            FUNC    T_ENTERO  0     40
               ------------------------------------
                Numero de argumentos:  2
               ------------------------------------
  3:  main           FUNC    T_ENTERO  0     84
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  4:  x              VAR     T_ENTERO  1      0
  5:  y              VAR     T_ENTERO  1      1
  6:  z              VAR     T_LOGICO  1      2

  1.- // Criba de Eratostenes: calcula los numeros primos menores 
// que un cierto numero  1 < n < 150.
//---------------------------------------------------------
bool a[150];

int main()
{ int max;     // Numero maximo para buscar
  int n=2;     // Siguiente numero primo
  int i;
  bool OK;

  // Comprobacion de que es un numero admisible
  for (OK = false; ! OK ;) {
    read(max);
    if ((max > 1) && (max < 150)) OK = true; else {}
  }
  
  // Inicializacion del vector de posible primos
  for (i=2; i <= max; i=i+1) a[i] = true;

  // Criba de Earatostenes
  for (OK = false; ! OK ;) {
    // Eliminacion de los multiplos de "n"
    for (i = 2; (i * n) <= max; i=i+1) a[i * n] = false; 
    // Busqueda del siguiente primo
    for (i = n + 1;  (! a[i] && (i <= max)); i=i+1) {}
    // Control del fin (n * n > max)
    if ((i * i) <= max) n = i;
    else OK = true;
  }

  // visualizacion de los primos menores que "max"
  for (i=2; i <= max; i=i+1)
    if (a[i]) print(i); else {}
  
  return 0;
}
===================================================
               TABLA  de  SIMBOLOS
===================================================
Ind.  Nombre         Cat.    Tipo      Niv.   Desp.
---------------------------------------------------
  0:  a              VAR     T_ARRAY   0      0
               ------------------------------------
                TipoElem = T_LOGICO   NumElem = 150 
               ------------------------------------
  1:  main           FUNC    T_ENTERO  0      2
               ------------------------------------
                Numero de argumentos:  0
               ------------------------------------
  2:  max            VAR     T_ENTERO  1      0
  3:  n              VAR     T_ENTERO  1      1
  4:  i              VAR     T_ENTERO  1      2
  5:  OK             VAR     T_LOGICO  1      3

